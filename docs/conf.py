# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


import abc

import pkg_resources

import sphinx_readable_theme
from autoclasstoc import is_data_attr, is_public, PublicMethods, Section


# -- Project information -----------------------------------------------------

project = "delb"
copyright = "2018-2021, Frank Sachsenheim"
author = "Frank Sachsenheim"

# The full version, including alpha/beta/rc tags
release = pkg_resources.get_distribution("delb").version
# The short X.Y version
version = ""


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "autoclasstoc",
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
    "sphinx.ext.viewcode",
    "sphinxcontrib.fulltoc",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#

html_theme = "readable"

html_theme_path = [sphinx_readable_theme.get_html_theme_path()]

html_logo = "images/delb_logo.svg"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

html_css_files = ["styles.css"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}

html_domain_indices = False


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "lxml-domeqsquedoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "lxml-domeqsque.tex",
        "lxml-domeqsque Documentation",
        "Frank Sachsenheim",
        "manual",
    ),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, "lxml-domeqsque", "lxml-domeqsque Documentation", [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "lxml-domeqsque",
        "lxml-domeqsque Documentation",
        author,
        "lxml-domeqsque",
        "One line description of project.",
        "Miscellaneous",
    ),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]


# -- Extension configuration -------------------------------------------------

# -- Options for autodoc extension -------------------------------------------

autodoc_default_options = {
    "inherited-members": True,
    "members": True,
}


class SectionBase(Section):
    def _find_attrs(self):
        result = {}
        for base_class in reversed(self.cls.__mro__):
            if base_class not in (object, abc.ABC):
                result.update(base_class.__dict__)
        return result

    def _find_inherited_attrs(self):
        return {}

    def predicate(self, name, attr, meta):
        return meta.get("category") == self.key


for key, title in (
    ("add-nodes", "Adding nodes"),
    ("fetch-node", "Fetching a single relative node"),
    ("iter-relatives", "Iterating over relative nodes"),
    ("query-nodes", "Querying descending nodes"),
    ("remove-node", "Removing a node from its tree"),
):
    type("CategorySection", (SectionBase,), {"key": key, "title": title})


class Property(SectionBase):
    key = "property"
    title = "Properties"

    def predicate(self, name, attr, meta):
        return is_data_attr(name, attr) and is_public(name)


class UncategorizedMembers(PublicMethods, SectionBase):
    title = "Uncategorized methods"

    def predicate(self, name, attr, meta):
        return super().predicate(name, attr, meta) and not meta.get("category")


autoclasstoc_sections = [
    "property",
    "fetch-node",
    "iter-relatives",
    "query-nodes",
    "add-nodes",
    "remove-node",
    "public-methods",
]


# -- Options for intersphinx extension ---------------------------------------

intersphinx_mapping = {"https://docs.python.org/": None}


# -- Options for doctest extension -------------------------------------------


doctest_global_setup = """
from typing import Any
from delb import *
"""
